# * REPRODUCIBLE RESEARCH COURSE PROJECT -1 *
# * REPRODUCIBLE RESEARCH COURSE PROJECT - 1 *
### INSTRUCTIONS
1. Code for reading in the dataset and/or processing the data
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
1.Code for reading in the dataset and/or processing the data
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
1 Code for reading in the dataset and/or processing the data
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
- Code for reading in the dataset and/or processing the data
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
1.  Code for reading in the dataset and/or processing the data
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
1.  Code for reading in the dataset and/or processing the data
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
1.  Code for reading in the dataset and/or processing the data.
2. Histogram of the total number of steps taken each day
3. Mean and median number of steps taken each day
4. Time series plot of the average number of steps taken
5. The 5-minute interval that, on average, contains the maximum number of steps
6. Code to describe and show a strategy for imputing missing data
7. Histogram of the total number of steps taken each day after missing values are imputed
8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
9. All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
activityData <- read.csv("./activity.csv")
activityData <- read.csv("./activity.csv")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(VIM)
library(mice)
activityData <- read.csv("./activity.csv")
library(readr)
activityData <- read.csv("./activity.csv")
library(readr)
library(tidyr)
activityData <- read.csv("./activity.csv")
library(readr)
library(tidyr)
install.packages(tidyr)
activityData <- read.csv("./activity.csv")
library(readr)
library(tidyr)
install.packages(tidyr)
load.packages(tidyr)
activityData <- read.csv("./activity.csv")
library(readr)
library(tidyr)
install.packages(tidyr)
load.package(tidyr)
activityData <- read.csv("./activity.csv")
library(readr)
library(tidyr)
install.package(tidyr)
load.package(tidyr)
activityData <- read.csv("./activity.csv")
library(readr)
library(dplyr)
activityData <- read.csv("./activity.csv")
library(readr)
library(dplyr)
library(ggplot2)
activityData <- read.csv("./activity.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(VIM)
activityData <- read.csv("./activity.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(mice)
library(knitr)
library(rmarkdown)
install.packages("knitr")
activityData <- read.csv("./activity.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
install.packages("knitr")
activityData <- read.csv("./activity.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
summary(activityData)
summary(activityData)
str(activity)
summary(activityData)
str(activityData)
## NUMBER OF STEPS PER DAY
## NUMBER OF STEPS PER DAY
StepsPerDay <- aggregate(activityData$steps, list(activityData$date), FUN=sum)
colnames(StepsPerDay) <- c("Date", "Steps")
StepsPerDay
## HISTOGRAM OF TOTAL STEPS TAKEN EACH DAY
hist(stepsPerDay$steps)
g <- ggplot(StepsPerDay, aes(Steps))
g <- ggplot(StepsPerDay, aes(Steps))
g+geom_histogram(boundary=0, binwidth=2000, col="darkred", fill="lightyellow")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,26000,2000))+scale_y_continuous(breaks=seq(0,20,2))
g <- ggplot(StepsPerDay, aes(Steps))
g+geom_histogram(boundary=0, binwidth=2000, col="darkred", fill="lightyellow")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,25000,2000))+scale_y_continuous(breaks=seq(0,20,2))
g <- ggplot(StepsPerDay, aes(Steps))
g+geom_histogram(boundary=0, binwidth=2000, col="darkred", fill="lightyellow")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,25000,2000))+scale_y_continuous(breaks=seq(0,18,2))
g <- ggplot(StepsPerDay, aes(Steps))
g+geom_histogram(boundary=0, binwidth=2000, col="darkred", fill="lightyellow")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,26000,2000))+scale_y_continuous(breaks=seq(0,20,2))
## MEAN AND MEDIAN OF THE TOTAL NUMBER OF STEPS TAKEN PER DAY
mean(StepsPerDay$Steps, na.rm=TRUE)
mean(StepsPerDay$Steps, na.rm=TRUE)
median(StepsPerDay$Steps, na.rm=TRUE)
StepsPerTime <- aggregate(steps~interval,data=activity,FUN=mean,na.action=na.omit)
StepsPerTime <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
StepsPerTime <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
StepsPerTime$time <- StepsPerTime$interval/100
StepsPerTime <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
StepsPerTime$time <- StepsPerTime$interval/100
h <- ggplot(STEPSPERTIME, aes(time, steps))
STEPSPERTIME <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
STEPSPERTIME$time <- StepsPerTime$interval/100
h <- ggplot(STEPSPERTIME, aes(time, steps))
STEPSPERTIME <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
STEPSPERTIME$time <- StepsPerTime$interval/100
h <- ggplot(STEPSPERTIME, aes(time, steps))
STEPSPERTIME <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
STEPSPERTIME$time <- StepsPerTime$interval/100
h <- ggplot(STEPSPERTIME, aes(time, steps))
h+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+theme(plot.title = element_text(face="bold", size=14))
a <- ggplot(StepsPerDay, aes(Steps))
a+geom_histogram(boundary=0, binwidth=2000, col="darkred", fill="lightyellow")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,26000,2000))+scale_y_continuous(breaks=seq(0,20,2))
b+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+theme(plot.title = element_text(face="bold", size=14))
STEPSPERTIME <- aggregate(steps~interval,data=activityData,FUN=mean,na.action=na.omit)
STEPSPERTIME$time <- StepsPerTime$interval/100
b <- ggplot(STEPSPERTIME, aes(time, steps))
b+geom_line(col="red")+ggtitle("Average steps per time interval")+xlab("Time")+ylab("Steps")+theme(plot.title = element_text(face="bold", size=14))
## 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
ST <- tbl_df(StepsPerTime)
ST <- tibble::as_tibble(StepsPerTime)
ST <- tibble::as_tibble(StepsPerTime)
ST %>% select(time, steps) %>% filter(steps==max(ST$steps))
# Imputing missing values
### Calculate and report the total number of missing values in the dataset
ACT <- tibble::as_tibble(activityData)
MISS <- tibble::as_tibble(activityData)
MISS <- tibble::as_tibble(activityData)
MISS %>% filter(is.na(steps)) %>% summarize(missing_values = n())
### REPLACING MISSING VALUES
activitData$CompleteSteps <- ifelse(is.na(activityData$steps), round(StepsPerTime$steps[match(activityData$interval, StepsPerTime$interval)],0), activityData$steps)
activitData$CompleteSteps <- ifelse(is.na(activityData$steps), round(STEPSPERTIME$steps[match(activityData$interval, STEPSPERTIME$interval)],0), activityData$steps)
activityData$CompleteSteps <- ifelse(is.na(activityData$steps), round(STEPSPERTIME$steps[match(activityData$interval, STEPSPERTIME$interval)],0), activityData$steps)
### NEW DATA
activityDataFull <- data.frame(steps=activityData$CompleteSteps, interval=activityData$interval, date=activityData$date)
activityDataFull <- data.frame(steps=activityData$CompleteSteps, interval=activityData$interval, date=activityData$date)
head(activityDataFull, n=10)
FullStepsPerDay <- aggregate(activityDataFull$steps, list(activityDataFull$date), FUN=sum)
colnames(FullStepsPerDay) <- c("Date", "Steps")
FullStepsPerDay <- aggregate(activityDataFull$steps, list(activityDataFull$date), FUN=sum)
colnames(FullStepsPerDay) <- c("Date", "Steps")
c <- ggplot(FullStepsPerDay, aes(Steps))
c+geom_histogram(boundary=0, binwidth=2000, col="darkgreen", fill="lightred")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,26000,2000))+scale_y_continuous(breaks=seq(0,26,2))
FullStepsPerDay <- aggregate(activityDataFull$steps, list(activityDataFull$date), FUN=sum)
colnames(FullStepsPerDay) <- c("Date", "Steps")
c <- ggplot(FullStepsPerDay, aes(Steps))
c+geom_histogram(boundary=0, binwidth=2000, col="darkgreen", fill="lightgreen")+ggtitle("Histogram of steps per day")+xlab("Steps")+ylab("Frequency")+theme(plot.title = element_text(face="bold", size=14))+scale_x_continuous(breaks=seq(0,26000,2000))+scale_y_continuous(breaks=seq(0,26,2))
### MAEN AND MEDIAN
### MAEN AND MEDIAN
mean(FullStepsPerDay$Steps)
median(FullStepsPerDay$Steps)
## Are there differences in activity patterns between weekdays and weekends
###Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activityDataFull$RealDate <- as.Date(activityDataFull$date, format = "%Y-%m-%d")
activityDataFull$RealDate <- as.Date(activityDataFull$date, format = "%Y-%m-%d")
activityDataFull$weekday <- weekdays(activityDataFull$RealDate)
activityDataFull$RealDate <- as.Date(activityDataFull$date, format = "%Y-%m-%d")
activityDataFull$weekday <- weekdays(activityDataFull$RealDate)
activityDataFull$DayType <- ifelse(activityDataFull$weekday=='Saturday' | activityDataFull$weekday=='Sunday', 'weekend','weekday')
activityDataFull$RealDate <- as.Date(activityDataFull$date, format = "%Y-%m-%d")
activityDataFull$weekday <- weekdays(activityDataFull$RealDate)
activityDataFull$DayType <- ifelse(activityDataFull$weekday=='Saturday' | activityDataFull$weekday=='Sunday', 'weekend','weekday')
head(activityDataFull, n=30)
## Make a panel plot containing a time series plot (i.e. type = "l"\color{red}{\verb|type = "l"|}type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis)
STEPSPERTIME1 <- aggregate(steps~interval+DayType,data=activityDataFull,FUN=mean,na.action=na.omit)
STEPSPERTIME1 <- aggregate(steps~interval+DayType,data=activityDataFull,FUN=mean,na.action=na.omit)
STEPSPERTIME1$time <- StepsPerTime$interval/100
STEPSPERTIME1 <- aggregate(steps~interval+DayType,data=activityDataFull,FUN=mean,na.action=na.omit)
STEPSPERTIME1$time <- StepsPerTime$interval/100
d <- ggplot(STEPSPERTIME1, aes(time, steps))
d+geom_line(col="darkgreen")+ggtitle("Average steps per time interval: weekdays vs. weekends")+xlab("Time")+ylab("Steps")+theme(plot.title = element_text(face="bold", size=14))+facet_grid(DayType ~ .)
